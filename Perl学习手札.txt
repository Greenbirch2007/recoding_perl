
CGI

就是所谓的“Common Gateway Interface”，动态网站程序的设计界面。

标量变量 Scalar $

\a：会发出哔的警铃声
\d：代表一个数字的字符
\D：代表一个非数字的字符
\e：跳脱符号 (escape)
\f：换页
\n：换行
\s：一个空白字符 (包括空行，换页，跳格键也都属于空白字符)
\S：非空白字符
\t：跳格字符 (Tab)
\w：一个字母，包括了a-z，A-Z，底线跟数字
\W：非字母


3. 列表与数组

$#array是数组中最后一个索引值
所以我们可以利用($#array + 1)得到目前数组中的元素个数(注二)。不过如果你打算利用这个索引值来确定目前数组的长度，并且加入新的元素，就像这样：

push,pop  最后元素，加，减

shift,unshift 最前面元素，减，加
切片



数组还是标量？
利用列表赋值给数组
在标量语境中记性
先以标量语境进行运算，然后以列表方式给数组

my @array = (1...10);   # 利用列表赋值给数组
my $scalar = @array + 4;   # 在标量语境中进行
my @scalar_array = @array + 4;  
# 先以标量语境进行运算，然后以列表方式赋值给数组

3.7 一些常用的数组运算
@_
sort($a,$b,<=>,cmp)
join,split
map,grep

排序前的数组4 6 9 61 3 64
b的数组4 6 9 61 3 64
排序后的数组3 4 6 9 61 64
排序后的b 4 6 9 61 3 64

所以perl里面的数组也是值类型，跟golang一样。但切片?
切片好像也是值类型

整数排序
其中$a跟$b是Perl的默认变量，在排序时被拿来作为两两取出的两个数字。而<=>则是表示数字的比较，如果数组中的元素是字符串，则必须以cmp来进行排序。
我们可以用接下来的例子来说明怎么样进行更复杂的排序工作。
sort {$a <=>$b} 低到高
sort {$b <=>$a}  高到低
字符串排序
cmp

sort 
sort {$a <=>$b} 低到高
sort {$b <=>$a}  高到低
@array = sort { $a cmp $b} @array;
@array = sort { $b cmp $a} @array;


my @array = qw/-4 45 -33 8 75 21 -15 38 -69 46/;
@array = sort { ($a**2) <=> ($b**2) } @array;   # 这次我们以平方进行排序
所以得到的结果会是：
-4 8 -15 21 -33 38 45 46 -69 75

join 列表中元素拼接为一个字符串

split 一个字符串分割，并放入数组

print join',',qw /s s s /;
print split',',"it's , saf";

3. map 将数组表里面的元素意义提出，运算，然后等到一个列表，放入数组
类似于python的lambda

my @array = map { sqrt($_)*10 } qw/45 33 8 75 21 15 38 69 46/;
print  "@array \n";

4.grep  可以把列表中匹配的元素留下来

my @array  =qw / 1 6 -2 5 1 -8 /;

my @grep_n = grep {$_>0} @array;

print "$_\n" for @grep_n;
$_ .= "\n" for @a;
map $_."\n", @a;

my map_ar = map s_*10,  @sites;

一、 将数字列表转换为相应的字符列表

my @chars = map(chr,@numbers);
二、 对数字列表中的每个元素计算平方，返回平方值的列表

my @quares = map {$_ * $_ } @numbers;
三、返回满足条件的数字的列表

my @numbers = map { $_ > 5 ? $_ : ()} @numbers;
注意
在BLOCK中$_ 是列表元素的别名，因为可以修改原列表的中元素的值。
如果列表中的元素不是变量，而在BLOCK中修改了$_的值，将会产生不可预料的结果。


my @sites =  (24, 33, 65, 42, 58, 24, 87);
# print @sites;
# print "$sites[0]\n";
my @new_ar = sort {$a <=> $b} @sites;
# print @new_ar;
# print $_ "\n" for @new_ar;

my @grep_ar = grep {$_ >40} @sites;
# print @grep_ar;

my @map_ar = map {$_*11}  @sites;
print @map_ar;



#!/usr/bin/perl
use strict;
my ($sum,$i);
while ($i < 100) {
$sum+=$i;
$i++;

}
print $sum;


4. 基本的控制结构

comminuty

4.1.3 区块 BLOCK
4.1.4 变量的生命周期


my $a = 3;
my $b = 9;

{
    print "$a \n"; # 属于外层的区块，所以你会看到3
    my $b =6; # 定了这个区块内自己的变量
    print "$b \n"; # 于是 输出6
}

{
   print "$a \n"; # 属于外层的区块，所以你会看到3
   print "$b \n"; # 于是 输出9
}

   print "$a \n"; # 属于外层的区块，所以你会看到3
   print "$b \n"; # 于是 输出9
   
 
 
 unless -----!if
 
 if (!($a<3)) 等价于unless($a<3)
 
 等价的写法
 
 if ($num<5){
	$num++;
	}
	
$num++ if ($num<5);

if ($num ==1){...}
if ($num !=1){...}



if ($num ==1){
...
}else{
}


if ($date eq 'm'){
...
}elsif ($date eq 't')
}else{
	print ""
	}
	
4.3 重复执行


4.3.1 while

单一判断可以使用倒装句，

while (1){
	print "这是无限循环";
	}
print "这是无限循环" while(1);

4.3.2 until

while <--->untll

unil ()

my $num = 1;
my $result = 1;
until ($num>10) {
    $result*=$num;
    $num+=1;
    print "$result $num \n";
}

4.4 for循环

my $result = 1;
for (my $num=1;$num <=10;$num+=1){
    $result *= $num;
}

可以非常件韩

for my $num (1..10){
print $num;
}

for (1..10){
print $_;
}

print for {1..10};


print foreach (@array);
foreach my $element (@array)

习题：

1. 算出1+3+5+...+99的值

2. 如果我们从1加到n，那么在累加结果不超过100，n的最大值应该是多少？
3. 让使用者输入一个数字，如果输入的数字小于50，则算出他的阶乘，否则就印出数字太大的警告。

	#!/usr/bin/perl


chomp(my $input =<STDIN>);
if ($input<50){
    my $total = 1;
    for ($i=1; $i<=$input; $i++) {
        $total *= $i;
        
    }
    print $total;

}else{
    print "too big";
}

子程序

用&来表明子成怒，

子程序的本身是以&符号作为辨识，所以如果你有一个叫做DoSub的子程序，那么你就可以利用&DoSub的方式来调用

my $num = 12;
print hex($num),"\n";   # 这是Perl提供的hex函数
print &hex($num),"\n";   # 我们自己写的hex子程序
sub hex {
my $param = shift;
$num*2;
}



6.2 参数

6.3 返回值

return 
my $return = &times(4); #把回传值放到$return


print $return;

sub times{
    my $max = shift ;# 把参数指定为变量$max
    my $total = 1; # 如果不指定，默认会是0，那乘法会发生错误
    for (1..$max){ #从1到$max
        $total *= $_; # 进行阶乘的动作
    }
    return $total #返回总数
}

perl会把子程序中最后一个运算的值当成默认的回传值，
可以省略return
shift函数是取数组的第一个元素，缺省就取@_的第一个函数，这句一般用在程序的开头，用于接收程序的参数，或者子函数的开头，用于接收子函数的参数。

shift会自动生成@_数组


shift函数是去数组的第一个元素
缺省就缺@_的第一个函数
shift一般用在程序的开头
用于接收程序的参数，或子函数的开头，用于接收程序的参数，或子函数的开头，用子函数的参数

6.4 再谈参数

perl在参数参数时所使用的默认数组

既然perl的参数是以数组的方式村粗，perl的数组
并没有大小的限制
以系统的限制为准
@_


my $return = &add(4,6,9,6,2,3);
print $return;


sub add{
    for (@_) { #针对默认数组进行运算
        $total += $_;#贾总
    }
    $total/($#_+1); #除以总数(取平均)
}


@m=([1,2,3],[1,2,3,4]);
$#$将引用bai看成数组然后求数组长du度，作用与数组的zhi$#意义是一样的$#m
$#$m[0]就是2，$#$m[1]就是3
最后一句的意思就是将$allitem看成数组得dao到的数组长度用于初始化$itemkeys引用的数组长度

6.5 子程序中的变量使用

子程序是可以使用程序中的全局变量的

用local来定义变量
local用来在确认某些变量是在子程序中私有的


pattern样式比对

perl使用=~进行比对
m//是比对的样式
可以省略m这个代表必读IDE字符

$string =~ m/$pattern/
$string =~ m($pattern)
$string =~ m!$pattern!
$string =~ m|$pattern|
$string =~ /$pattern/


perl在完成比对之后，会返回成功预防后的数值

my $answer = "monger";

until ((my $pattern=<STDIN>) =~ /$answer/) {
    print "wrong\n";
} ;
从标准输入设备读取使用者输入的字符串
并且把读进来的字符串放到变量$pattern,

*表示出现零次以上任意次数，
o*表示o出现零次或以上

my $answer = "mo{2,4}r";

my $answer = "mo{,4}r"; 不超过4次

可以利用()把想要比对的字符串放到一个群组
(wow)+
(wow){2,4}，


/a|b/

/f(00|ee)t/

/it(is|was)a good choice/
/on (Match|a)/


8.2 比对的字符集合

在比对大小写
[a-zA-Z_]
[0-9]
[!@#$%^&*()_+-=] 会报错
[!@#$%^&*()_+\-=] 这才是正确的
^排除字符
[^24680]
这就表示比对24680以外的字符才运运算符合。

8.3 

\s：很多时候，我们回看到要比对的字符串中有一些空白，可是很难分辨他们到底是空格，跳格符号或甚至是换行符号 (注一)，这时候我们可以用\s来对这些字符进行比对。而且\s对于空白符号的比对掌握非常的高，他可以处理(\n\t\f\r )这五种字符。除了原来的空白键，以及我们所提过的跳格字符(\t)，换行字符(\n)外，\s还会比对藉以表示回行首的\r跟换页字符\f。
\S：在大部分的时候，正则表达式特殊字符的大小写总是表示相反的意思，例如我们使用\s来表示上面所说的五种空白字符，那么\S也就是排除以上五种字符。
\w：这个特殊字符就等同于[a-zA-Z]的字符集合，例如你可以比对长度为3到10的英文单字，那就要写成：\w{3,10}，同样的，你就可以比对英文字母或英文单字了。
\W：同样的，如果你不希望看到任何在英文字母范围里的字符，不妨就用这个方式避开。
\d：这个特殊的字符就是字符集合[0-9]的缩写。
\D：其实你也可以写成[^0-9]，如果你不觉得麻烦的话。

.表示全部字符


8.4 一些修饰字符

$content =~ /perl/i
i表示忽略大小写
/i 
/s 表示进行跨行比对


8.5 取得比对结果
perl有默认的变量取出比对的结果
$1,$2...

my $content = "Taipei Perl Monger";
$content =~ /(Monger$)/; # $1 现在是 Monger
print $1;
$content = /(perl)/; # 比对失败
print $1; # 所以还是印出 Monger

常用判断式去根据比对的成功与否决定是否单一

my $content = "Taipei Perl Monger";
print $1 if ($content =~ /(Monger$)/); # 因为比对成功，所以会印出Monger
print $1 if ($content = /(perl)/); # 这里就不会印出任何结果了


8.6 定位点

/^perl/  
^表示字符串开始的位置
$表示字符串结束的位置

8.7

比对与替换
s///来表示替换
第一部分表示比对的字符串，
第二部分表示要进行替换的部分


my $content = "I love Java";
print $content if ($content =~ s/java/perl/);

S///g表示全部替换
S///gis表示全部替换,而且不管大小，同时跨行比对

8.8 有趣的字符串呃逆交换

my $string = "门是开着的，灯是关着的";
print $string if ($string =~ s/(门)(.*)(，)(灯)(.*)/$3$2$1$4/);


8.9 不贪多比对
非贪婪比对

.+？

8.10  有重叠字

回溯引用(backreference)

my $string = "庭院深深深几许";
print $string if ($string =~ /(深)\1\1/);


匹配：m//（还可以简写为//，略去m）


8.11 比对样式群组
(())

8.12 比对样式的控制


\w 匹配一个字母、数字或下划线字符，相当于[a-zA-Z_0-9]
\s 匹配一个空字符
\d 匹配一个数字
\b 匹配单词的首尾

$input =~ /\b(p\w*l)\b/
\w* 零次或多次字符




再谈控制结构

9.1 循环控制

（last,redo,next,switch）

9.1.1 last
表示最后

for(1..10){
    last if ($_==8);
    print;
}

last的使用是有限制的，它只允许
在可以执行结束结束的区块内
last必须在for,foreach,while,until内才有效

9.1.2 redo


利用redo重新执行循环中的某些条件
for (1...10) {
$_++;   # redo 其实会来这里
redo if ($_ == 8);   # 我们希望 redo 的条件
print

++	自增运算符，整数值增加 1	$a =10, $a++ will 输出为 11


for ($_ = 1; $_ <= 10; $_++) {
$_++;   # 我们还是先把得到的元素进行累加
redo if ($_ == 8);   # 遇到8的时候就重复一次
print $_;   # 印出目前的 $_，我们得到2, 4, 6, 9, 11
}


9.1.3 next 
last，用来结束某个区块
redo,用来重复还行循环中的某个条件判断
next,也就是忽略循环中的某些判断

for (1...10) {
next if ($_%2);   # 以列表值除以2的余数判断
print $_;
}



10. perl的文件读写

系统日志管理，读写文件并进行分析师最近的部分


10.1  文件句柄(FileHandle)

利用文件句柄取得和文件间的联系

所谓文件句柄就是由使用者自行命名
并且用来跟实体文件进行连接的名称


10.2 默认的文件句柄

STDIN,STDOUT,STDERR,DATA,ARGV,ARGOUT

STDIN：这也就是我们常看到的“标准输入设备”，当Perl开始执行时，它默认接受的外部信息就是从这里而来。

STDOUT 标准输出


STDERR：标准的错误串流，也就是程序错误的标准输出

perl stderr.pl > error.txt


如果发生什么异常状况，可以把错误信息存在某个文件中，这样一来我们就可以只检查这个日志文件

ARGV:可以直接利用参数来读取某些文件的内容
使用者只需要在执行程序时，在程序后加上
文件名称作为参数，然后在程序中我们就
可以额会直接剫文件

@ARGV,也是程序的参数，它也是吧取得参数
放入数组，然后在程序里就直接可以调用数组，取出参数

my $input = shift @ARGV;
print"$input \n";

也可以对ARGV进行一般文件句柄的才做


10.3 文件的基本操作


10.3.1  开档，关档

最基本的，开启一个文件，必须将文件句柄和
想要读写文件接上。

可以使用open来开启文件句柄，并且指定这个文件
句柄对应的文件名称

open FILE,"file.txt";
open OUTPUT,"<output.txt";# 从文件输出
open INPUT,">input.txt"; #输入文件
open append,">>append.txt" #附加在现有文件结尾

>>追加，不覆盖

close FILE;


10.3.2 意外处理

open File, "foo.txt" or die "开启文件失败: $!";

如果没有文件就让程序报错

use strict;
open File, "ee.txt" or die "开启文件失败: $!";
while (<FILE>) {
    print $_;
}

11.文件系统

运用文件句柄实际上操作整个系统的目录和文件

11.1 文件测试



use strict;
my $logfile = "D:\\Python3.8\\pythonw1";#先指定文件到变量 $logfile
if (-e $logfile){#判断文件是否存在
open LOG,$logfile or die "$!"; #开启文件句柄
my $line_num = 1;
while (<LOG>) {
    print "$line_num\t$_\n";
    $line_num++
}

}else{
    print "文件不存在\n";
}

-e确定文件是否存在
-A  文件上次读写至今的时间
-B  文件被判断为二进位档
-C  文件的 inode 被更改至今的时间
-M  文件上次修改至今的时间
-O  目前实际使用者是否为该文件或目录的拥有者
-R  目前实际的使用者具有读的权限
-S  文件句柄是否为 socket
-T  文件判断为文字档
-W  目前实际的使用者具有写的权限
-X  目前实际的使用者具有执行的权限
-c  字符型文件
-e  检查文件或目录是否存在
-f  判断文件是否为文字档
-g  文件或目录具有 setgid 属性
-k  文件或目录设定了 sticky 位元
-l  文件句柄是一个符号连结
-o  目前的使用者是否为该文件或目录的拥有者
-r  目前的使用者具有读的权限
-s  文件或目录存在而且有内容
-t  文件句柄是 TTY 装置
-u  文件或目录具有 setuid 属性
-w  目前的使用者具有写的权限
-x  目前的使用者具有执行的权限
-z  文件或目录存在而且没有内容

11.2  重要的文件相关内奸函数

perl大多数都是通过底层的作业系统去操作

perldoc -f -X 来查看所有的测试符号

perl在处理we年句柄或其他文件的函数
多达几十个

chdir :用来切换目前工作目录

chdir "D:\\Python3.8" or die $!;
open LOG, ">log.txt" or die $!;
print LOG "write to log\n" or die $!;


chmod:修改文件或忙碌的额权限

chmod 0444,"log.txt"

$mode =0644;
chmod $mode,'log.txt';


注意，使用标量赋值是，perl会把指定的
数字设定为八进位。
chmod需要的是一个八进位数，而不是一个字符串

还需要将标量转换为八进位


$mode ='0644';chmod oct($mode),'log.txt';

chown:修改文件或资料夹的拥有者
使用者id(uid)跟群组id(gid)
使用的方式则是将使用者id跟群组id
利用列表的方式来描述
配合想要修改的文件

chown LIST;

chown $uid,$gid,'log.txt';

后面的文件可以利用列表的方式，或
直接以数组方式。


chown $uid,$gid, @array;

直接使用数组的好处
可以利用样式比对出象牙ode文件
然后一次性进行信管修改

ls *pl

glod 可以利用上一个样式，作为比对的标准

@filelist = glob "*.pl";


可以把glob所返回的文件列表放入一个数组中
然后字啊针对这个数组进行chown或chmod
相关做
@filelist = <*.pl>;

上面也都是取得目录下的文件，并且依据你所描述的
样式返回你需要的文件

比如想要目录下所有的.txt文件

for $file (<*.txt>) {
open FH, $file;
print $_ while (<FH>);
}

可以利用<>代替glob的工作
可以同时<>也被我们拿来作为读文件内容的运算

open FH,$file;
$filehandle = "FH";
print $_ while(<$filehandle>);


link:需要把文件建立链接。类似ln

my $res = link "/home/foo","/home/bar";

link指令会有一个回传值，如果链接成功
则回传值为真值，相反链接，则返回伪值

use strict;
my $ret = link "log.txt","log.bak";
open FH,"log.bak" or die $! if ($ret);
print $_ while(<FH>);


inode这个概念会帮助链接的意义

mkdir PATH


可以通过umask来怕你当这个目录的权限
唯一的差别只是把你希望指定的unmask放在判断的最后

mkdir foo,0777


rename 用来修改文件名称


my $file = "message.log";
if (-e $file){
rename $file,"$file.old";
}
open FH,">&file";
print FH,"接下来就可以写入资料";


rename $oldfile,$newfile;

使用了大于号(>)来开启文件句柄
如果之前没有先把文件更名，那旧资料就会被取代

rmdir,删除一个文件夹

rmdir FILENAME;

stat可以得到许多文件相关信息

my @ret = stat "log.txt";
print "$_\n" for (@ret);
于是我们试着执行这个程序，会看到这样的结果：
234881034   # 装置编号
1183005   # inode 编号
33060   # 文件模式(类型及权限)
1   # 文件的连结数目
501   # uid
501   # gid
0   # 装置辨识
17   # 文件大小
1078894964   # 最后读写时间
1078894638   # 最后修改时间
1078939576   # inode 修改的时间
4096   # 文件读写时的区块大小
8   # 区块的数目


($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,
$blocks) = stat("log.txt");


可以利用一个数组来存储stat的回传值，
这样可以分辨各个值所代表的意义


unlink:也可以删除某些文件,类似rm

unlink删除时，只需要传入想要删除的文件列表。
搭配glob或角括号<>使用，可以过滤出某些特殊的文件
并进行删除


my @files = <*.ccp>;
unlink @files or die $!;

untime :可以修改文件时间

utime可以传入一个列表
utime LIST

utime $atime,$mtime,@files;

其中第一个参数就是文件读写时间，第二个参数就是文件
最后一次修改的时间


11.3 localtime


inode修改的时 10013454

可以使用localtime来转换一般人可以接受而使用的信息

localtime会返回一个列表，分别代表用来表示时间的
各个栏位，

@realtime = localtime($timestamp);
只是如果你使用这样的方式，恐怕自己也很难很快的使用，所以也许可以换一个方式：
($sec, $min, $hour, $day, $mon, $year, $wday, $yday, $isdat) =
localtime ($timestamp);


1. 列出目前所在位置的所有文件/资料夹名称。

解答：我们可以用简单的角括号方式来取得目前目录下的所有内容。

#!/usr/bin/perl -w
use strict;
my @files = <*>;
print "$_\n" for @files;

2. 承一，只列出资料夹名称。

解答：在这里，我们只需要修改刚刚的程序，在打印前判断我们取得的是文件或资料夹。

my @files = <*>;
for (@files) {
print "$_\n" if (-d $_);
}

3. 利用perl，把目录下所有附档名为.pl的文件修改权限为可执行。

解答：首先我们还是使用角括号，但是我们这次要取出的只有所有附档名为.pl的文件。接下来，再以chmod来修改权限。

my @files = <*.pl>;
chmod 0755, @files;


利用